=begin
#Xero Files API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.3.7
Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for WorkflowMaxRuby::FilesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FilesApi' do
  before do
    # run before each test
    @api_instance = WorkflowMaxRuby::FilesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FilesApi' do
    it 'should create an instance of FilesApi' do
      expect(@api_instance).to be_instance_of(WorkflowMaxRuby::FilesApi)
    end
  end

  # unit tests for create_file_association
  # create a new association
  # By passing in the appropriate options, you can create a new folder
  # @param xero_tenant_id Xero identifier for Tenant
  # @param file_id File id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [Association] :association 
  # @return [Association]
  describe 'create_file_association test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_folder
  # create a new folder
  # By passing in the appropriate properties, you can create a new folder
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Folder] :folder 
  # @return [Folder]
  describe 'create_folder test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_file
  # delete a file
  # Delete a specific file
  # @param xero_tenant_id Xero identifier for Tenant
  # @param file_id File id for single object
  # @param [Hash] opts the optional parameters
  # @return [FileResponse204]
  describe 'delete_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_file_association
  # create a new association
  # By passing in the appropriate options, you can create a new folder
  # @param xero_tenant_id Xero identifier for Tenant
  # @param file_id File id for single object
  # @param object_id Object id for single object
  # @param [Hash] opts the optional parameters
  # @return [FileResponse204]
  describe 'delete_file_association test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_folder
  # delete a folder
  # By passing in the appropriate ID, you can delete a folder
  # @param xero_tenant_id Xero identifier for Tenant
  # @param folder_id Folder id for single object
  # @param [Hash] opts the optional parameters
  # @return [FileResponse204]
  describe 'delete_folder test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_associations_by_object
  # searches files
  # By passing in the appropriate options,
  # @param xero_tenant_id Xero identifier for Tenant
  # @param object_id Object id for single object
  # @param [Hash] opts the optional parameters
  # @return [Array<Association>]
  describe 'get_associations_by_object test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file
  # searches for file by unique id
  # @param xero_tenant_id Xero identifier for Tenant
  # @param file_id File id for single object
  # @param [Hash] opts the optional parameters
  # @return [FileObject]
  describe 'get_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file_associations
  # searches files
  # By passing in the appropriate options,  
  # @param xero_tenant_id Xero identifier for Tenant
  # @param file_id File id for single object
  # @param [Hash] opts the optional parameters
  # @return [Array<Association>]
  describe 'get_file_associations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file_content
  # searches files to retrieve the data
  # By passing in the appropriate options, retrieve data for specific file
  # @param xero_tenant_id Xero identifier for Tenant
  # @param file_id File id for single object
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_file_content test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_files
  # searches files
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :pagesize pass an optional page size value
  # @option opts [Integer] :page number of records to skip for pagination
  # @option opts [String] :sort values to sort by
  # @return [Files]
  describe 'get_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_folder
  # searches specific folder by id
  # By passing in the appropriate ID, you can search for specific folder
  # @param xero_tenant_id Xero identifier for Tenant
  # @param folder_id Folder id for single object
  # @param [Hash] opts the optional parameters
  # @return [Folder]
  describe 'get_folder test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_folders
  # searches folder
  # By passing in the appropriate options, you can search for available folders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort values to sort by
  # @return [Array<Folder>]
  describe 'get_folders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_inbox
  # searches inbox folder
  # Search for the user inbox
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [Folder]
  describe 'get_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_file
  # Update a file
  # Update properties on a single file
  # @param xero_tenant_id Xero identifier for Tenant
  # @param file_id File id for single object
  # @param [Hash] opts the optional parameters
  # @option opts [FileObject] :file_object 
  # @return [FileObject]
  describe 'update_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_folder
  # update folder
  # By passing in the appropriate ID and properties, you can update a folder
  # @param xero_tenant_id Xero identifier for Tenant
  # @param folder_id Folder id for single object
  # @param folder 
  # @param [Hash] opts the optional parameters
  # @return [Folder]
  describe 'update_folder test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_file
  # upload an File
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder_id pass an optional folder id to save file to specific folder
  # @option opts [String] :body 
  # @option opts [String] :name exact name of the file you are uploading
  # @option opts [String] :filename 
  # @option opts [String] :mime_type 
  # @return [FileObject]
  describe 'upload_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
