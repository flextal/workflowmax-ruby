=begin
#WorkflowMax Jobs API

#This is the WorkflowMax Jobs API

Contact: blair@hireassemble.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

module WorkflowMaxRuby::Jobs
  require 'bigdecimal'

  class Job
    attr_accessor :id
    attr_accessor :uuid
    attr_accessor :name
    attr_accessor :description
    attr_accessor :client_order_number
    attr_accessor :budget
    attr_accessor :state
    attr_accessor :type
    attr_accessor :start_date
    attr_accessor :due_date
    attr_accessor :completed_date
    attr_accessor :client
    attr_accessor :contact
    attr_accessor :manager
    attr_accessor :partner
    attr_accessor :assigned
    attr_accessor :tasks
    attr_accessor :milestones
    attr_accessor :notes
    attr_accessor :web_url


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'ID',
        :'uuid' => :'UUID',
        :'name' => :'Name',
        :'description' => :'Description',
        :'budget' => :'Budget',
        :'state' => :'State',
        :'type' => :'Type',
        :'client_order_number' => :'ClientOrderNumber',
        :'start_date' => :'StartDate',
        :'due_date' => :'DueDate',
        :'completed_date' => :'CompletedDate',
        :'client' => :'Client',
        :'contact' => :'Contact',
        :'manager' => :'Manager',
        :'partner' => :'Partner',
        :'assigned' => :'Assigned',
        :'tasks' => :'Tasks',
        :'milestones' => :'Milestones',
        :'notes' => :'Notes',
        :'web_url' => :'WebUrl'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'uuid' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'budget' => :'Float',
        :'state' => :'String',
        :'type' => :'String',
        :'client_order_number' => :'String',
        :'start_date' => :'DateTime',
        :'due_date' => :'DateTime',
        :'completed_date' => :'DateTime',
        :'client' => :'Client',
        :'contact' => :'Contact',
        :'manager' => :'Manager',
        :'partner' => :'Partner',
        :'assigned' => :'Array<Staff>',
        :'tasks' => :'Array<Task>',
        :'milestones' => :'Array<Milestone>',
        :'notes' => :'String',
        :'web_url' => :'String'

      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `WorkflowMaxRuby::Tasks::Task` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `WorkflowMaxRuby::Tasks::Task`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.project_id = attributes[:'id']
      end

      if attributes.key?(:'uuid')
        self.project_id = attributes[:'uuid']
      end

      if attributes.key?(:'name')
        self.contact_id = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.name = attributes[:'description']
      end

      if attributes.key?(:'budget')
        self.name = attributes[:'budget']
      end

      if attributes.key?(:'state')
        self.name = attributes[:'state']
      end

      if attributes.key?(:'type')
        self.name = attributes[:'type']
      end

      if attributes.key?(:'client_order_number')
        self.name = attributes[:'client_order_number']
      end

      if attributes.key?(:'start_date')
        self.name = attributes[:'start_date']
      end

      if attributes.key?(:'due_date')
        self.name = attributes[:'due_date']
      end

      if attributes.key?(:'completed_date')
        self.name = attributes[:'completed_date']
      end

      if attributes.key?(:'client')
        self.name = attributes[:'client']
      end

      if attributes.key?(:'contact')
        self.name = attributes[:'contact']
      end

      if attributes.key?(:'manager')
        self.name = attributes[:'manager']
      end

      if attributes.key?(:'partner')
        self.name = attributes[:'partner']
      end

      if attributes.key?(:'assigned')
        self.name = attributes[:'assigned']
      end

      if attributes.key?(:'tasks')
        if (value = attributes[:'tasks']).is_a?(Array)
          self.tasks = value
        end
      end

      if attributes.key?(:'milestones')
        if (value = attributes[:'milestones']).is_a?(Array)
          self.milestones = value
        end
      end

      if attributes.key?(:'notes')
        self.name = attributes[:'notes']
      end

      if attributes.key?(:'web_url')
        self.name = attributes[:'web_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
        id == o.id &&
        uuid == o.uuid &&
        name == o.name &&
        description == o.description &&
        budget == o.budget &&
        state == o.state &&
        type == o.type &&
        client_order_number == o.client_order_number &&
        start_date == o.start_date &&
        due_date == o.due_date &&
        completed_date == o.completed_date &&
        client == o.client &&
        contact == o.contact &&
        manager == o.manager &&
        partner == o.partner &&
        assigned == o.assigned &&
        tasks == o.tasks &&
        milestones == o.milestones &&
        notes == o.notes &&
        web_url == o.web_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, uuid, name, description, budget, state, type, client_order_number, start_date, due_date, completed_date, client, contact, manager, partner, assigned, tasks, milestones, notes, web_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          elsif attributes[self.class.attribute_map[key]].is_a?(Hash)
            attributes[self.class.attribute_map[key]].each do |a|
              if a[1].is_a?(Array)
                self.send("#{key}=", a[1].map { |v| _deserialize($1, v) })
              else
                self.send("#{key}=", a.map { |v| _deserialize($1, v) })
              end
            end
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(parse_date(value))
      when :Date
        Date.parse(parse_date(value))
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BigDecimal
        BigDecimal(value.to_s)
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      when :Assigned
        WorkflowMaxRuby::Jobs.const_get(type).build_from_hash(value[1])
      else # model
        WorkflowMaxRuby::Jobs.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash(downcase: false)
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        key = downcase ? attr : param
        hash[key] = _to_hash(value, downcase: downcase)
      end
      hash
    end

    # Returns the object in the form of hash with snake_case
    def to_attributes
      to_hash(downcase: true)
    end

    def parse_date(datestring)
      if datestring.include?('Date')
        date_pattern = /\/Date\((-?\d+)(\+\d+)?\)\//
        original, date, timezone = *date_pattern.match(datestring)
        date = (date.to_i / 1000)
        Time.at(date).utc.strftime('%Y-%m-%dT%H:%M:%S%z').to_s
      else # handle date 'types' for small subset of payroll API's
        Time.parse(datestring).strftime('%Y-%m-%dT%H:%M:%S').to_s
      end
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value, downcase: false)
      if value.is_a?(Array)
        value.map do |v|
          v.to_hash(downcase: downcase)
        end
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.map { |k, v| hash[k] = _to_hash(v, downcase: downcase) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash(downcase: downcase)
      else
        value
      end
    end
  end
end
